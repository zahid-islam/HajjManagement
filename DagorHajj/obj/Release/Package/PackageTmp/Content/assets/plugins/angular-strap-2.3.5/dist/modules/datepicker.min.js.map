{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","$get","isNative","isTouch","DatepickerFactory","$datepicker","options","$options","pickerViews","views","el","selected","date","element","focus","viewDate","scope","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","value","$toggleMode","setMode","select","isDate","$build","length","updateDisabledDates","disabledDateRanges","dateRanges","$date","forEach","i","$dateValue","controller","$setViewValue","copy","$render","hide","keep","Date","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","rows","built","$isSelected","$setDisabledEl","disabled","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","$element","directive","$scope","require","restrict","$window","navigator","userAgent","link","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","key","isDefined","lang","dateParser","$dateParser","strict","format","bsShow","$watch","isString","newValue","getDateForAttribute","validateAgainstMinMaxDate","$observe","ngModel","oldValue","disabledDates","parse","timezoneOffsetAdjust","$formatters","isUndefined","modelValue","NaN","daySplit","arr","mod","n","m","arrays","splice","size","push","$dateFormatter","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","split","getMonth","update","firstDayOfMonth","firstDate","getDay","today","firstDateOffset","build","day","days","isToday","toDateString","label","muted","title","showLabels","labels","time","isSelected","indexOf","newDate","name","firstMonth","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","setYear","Array","prototype"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function(date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function(value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function() {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function(date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function(dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function(date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function() { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function(mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function(pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function() {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function(date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function(el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function(value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function(evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function(evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function() { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function() {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function() {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function() {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function(blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    var defaults = $datepicker.defaults;\n    var isNative = /(ip(a|o)d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function(key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function(key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if (!datepicker || !angular.isDefined(newValue)) return;\n          if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n          newValue === true ? datepicker.show() : datepicker.hide();\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function(key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          angular.isDefined(attr[key]) && attr.$observe(key, function(newValue) {\n            // console.warn('attr.$observe(%s)=%o', key, newValue);\n            datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n            // Build only if dirty\n            !isNaN(datepicker.$options[key]) && datepicker.$build(false);\n            validateAgainstMinMaxDate(controller.$dateValue);\n          });\n        });\n\n        // Observe date format\n        angular.isDefined(attr.dateFormat) && attr.$observe('dateFormat', function(newValue) {\n          datepicker.$options.dateFormat = newValue;\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function(disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function(viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          } else {\n            validateAgainstMinMaxDate(parsedDate);\n          }\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          } else {\n            return new Date(date);\n          }\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function(modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function() {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function() {\n\n    var defaults = this.defaults = {\n      dayFormat: 'dd',\n      daySplit: 7\n    };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while(arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function($dateFormatter, $dateParser, $sce) {\n\n      return function(picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function(date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n            format: options.dayFormat,\n            split: 7,\n            steps: { month: 1 },\n            update: function(date, force) {\n              if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n                viewDate.date = picker.$date.getDate();\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1), firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n              var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5), firstDateOffset = firstDate.getTimezoneOffset();\n              var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n              if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n              var days = [], day;\n              for(var i = 0; i < 42; i++) { // < 7 * 6\n                day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n                days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n              }\n              scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n              scope.showLabels = true;\n              scope.labels = weekDaysLabelsHtml;\n              scope.rows = split(days, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n            },\n            isDisabled: function(date) {\n              var time = date.getTime();\n\n              // Disabled because of min/max date.\n              if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n              if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n              if (options.disabledDateRanges) {\n                for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                  if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualTime = picker.$date.getTime();\n              var newDate;\n\n              if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'month',\n            format: options.monthFormat,\n            split: 4,\n            steps: { year: 1 },\n            update: function(date, force) {\n              if (!this.built || date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getMonth() !== viewDate.month) {\n                angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstMonth = new Date(viewDate.year, 0, 1);\n              var months = [], month;\n              for (var i = 0; i < 12; i++) {\n                month = new Date(viewDate.year, i, 1);\n                months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n              }\n              scope.title = formatDate(month, options.yearTitleFormat);\n              scope.showLabels = false;\n              scope.rows = split(months, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualMonth = picker.$date.getMonth();\n              var newDate = new Date(picker.$date);\n\n              if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }, {\n            name: 'year',\n            format: options.yearFormat,\n            split: 4,\n            steps: { year: 12 },\n            update: function(date, force) {\n              if (!this.built || force || parseInt(date.getFullYear()/20, 10) !== parseInt(viewDate.year/20, 10)) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$build();\n              } else if (date.getFullYear() !== viewDate.year) {\n                angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n                picker.$updateSelected();\n              }\n            },\n            build: function() {\n              var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n              var years = [], year;\n              for (var i = 0; i < 12; i++) {\n                year = new Date(firstYear + i, 0, 1);\n                years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n              }\n              scope.title = years[0].label + '-' + years[years.length - 1].label;\n              scope.showLabels = false;\n              scope.rows = split(years, this.split);\n              this.built = true;\n            },\n            isSelected: function(date) {\n              return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n            },\n            isDisabled: function(date) {\n              var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n              return lastDate < options.minDate || date.getTime() > options.maxDate;\n            },\n            onKeyDown: function(evt) {\n              if (!picker.$date) {\n                return;\n              }\n              var actualYear = picker.$date.getFullYear(),\n                  newDate = new Date(picker.$date);\n\n              if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n              if (!this.isDisabled(newDate)) picker.select(newDate, true);\n            }\n          }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}